local mt = getrawmetatable(game);
    make_writeable(mt);
    local old_index = mt.__index;
    
    mt.__index = function(a, b)
    if tostring(a) == "HumanoidRootPart" then
    if tostring(b) == "Size" then
    return Vector3.new(2, 2, 1);
    end
    end
    return old_index(a, b);
    end



spawn(function()
game:GetService('RunService').RenderStepped:connect(function()

for i,v in pairs(game:GetService('Players'):GetPlayers()) do

    if v.Name ~= game.Players.LocalPlayer.Name then

game.Workspace[v.Name].HumanoidRootPart.Size = SizeXCV

game.Workspace[v.Name].HumanoidRootPart.Transparency = TransparencyXCV or SizeXCVs

game.Workspace[v.Name].HumanoidRootPart.Color = ColourXCV

game.Workspace[v.Name].HumanoidRootPart.Material = "ForceField"

game.Workspace[v.Name].HumanoidRootPart.CanCollide = false

wait()

end

end

end)

end)


local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = game:GetService("Players").LocalPlayer:GetMouse()

FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255,255,255)
FOV_Circle.Thickness = 1
FOV_Circle.NumSides = 300
FOV_Circle.Radius = 250
FOV_Circle.Visible = false
FOV_Circle.Filled = false

local function ClosestPlayerToCursor()
    local Closest = nil
    local Distance = 9e9
    for i, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= Player then
            if Workspace[v.Name]:FindFirstChild("Humanoid") and Workspace[v.Name].Humanoid.Health ~= 0 then
                local Position = Camera:WorldToViewportPoint(Workspace[v.Name].HumanoidRootPart.Position)
                local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if Magnitude < Distance and Magnitude < FOV_Circle.Radius then
                    Closest = Workspace[v.Name]
                    Distance = Magnitude
                end
            end
        end
    end
    return Closest
end



local Players = game:GetService("Players");
local LocalPlayer = Players.LocalPlayer;
local Backpack = LocalPlayer.Backpack;
local LocalCharacter = LocalPlayer.Character;
local LocalRootPart : Instance;
local LocalHumanoid : Instance;

local UI = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ScreenGui"):WaitForChild("UI");
local TargetFrame = UI.Target;
local TargetVisible = TargetFrame.Visible;
local TargetText = TargetFrame.TargetText;
local Target = TargetVisible and Players:FindFirstChild(TargetText.Text);
local TargetCharacter : Instance;
local TargetRootPart : Instance;

game:GetService('RunService').Stepped:connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)




local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()

local watermark = library:Watermark("THIS IS HYDROGEN BETA! EXPECT BUGS")

local main = library:Load{
    Name = "Hydrogen Premium Script Assassin",
    SizeX = 650,
    SizeY = 600,
    Theme = "Midnight",
    Extension = "json", 
    Folder = "HYDROGEN ASSASSIN FOLDER"
}




local tab = main:Tab("Combat")

local section = tab:Section{
    Name = "Silent Aim",
    Side = "Left"
}


  _G.Toggle = false
local toggle = section:Toggle{
    Name = "TP Silent Aim",
    Flag = "TP Silent Aim",
    Callback  = function(bool)
        _G.Toggle = bool
end
}

spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
        pcall(function()
            if _G.Toggle == true then
                for i, v in pairs(game:GetService("Workspace").KnifeHost.PowerUps:GetDescendants()) do
                    if v:IsA("Part") then
                        v.Archivable = false
                    end
                end
            end
        end)
    end)
end)

spawn(function()
    game:GetService('RunService').RenderStepped:connect(function()
        pcall(function()
            if _G.Toggle == true then
                for i, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if v:IsA("Part") then
                        if v.Archivable == true then
                            local PlayerPosition = ClosestPlayerToCursor().baseHitbox.CFrame
                            v.CFrame = PlayerPosition
                        end
                    end
                end
            end
        end)
    end)
end)




local toggle = section:Toggle{
    Name = "Legit Silent Aim",
    Flag = "Legit  Silent Aim",
    --Default = true,
    Callback  = function(bool)
        
    end
}


local section = tab:Section{
    Name = "Aiming FOV",
    Side = "Left"
}





local toggle = section:Toggle{
    Name = "Aiming FOV Enabled/Disabled",
    Flag = "Aiming FOV",
    --Default = true,
    Callback  = function(bool)
        	FOV_Circle.Visible = bool
        
    end
}

local toggle = section:Toggle{
    Name = "Aiming FOV Filled",
    Flag = "Filled FOV",
    --Default = true,
    Callback  = function(bool)
        	FOV_Circle.Filled = bool
        
    end
}



local slider = section:Slider{
    Name = "Radius",
    Text = "Aiming FOV Radius",
    --Default = 0.1,
    Min = 0,
    Max = 500,
    Float = 1,
    Flag = "FOV RADIUS",
    Callback = function(value)
        FOV_Circle.Radius = value
    end
}

local slider = section:Slider{
    Name = "Numsides",
    Text = "Aiming FOV Numsides",
    --Default = 0.1,
    Min = 0,
    Max = 50,
    Float = 1,
    Flag = "FOV NUMSIDES",
    Callback = function(value)
    FOV_Circle.NumSides = value
end
}


local slider = section:Slider{
    Name = "Thickness",
    Text = "Aiming FOV Thickness",
    --Default = 0.1,
    Min = 0,
    Max = 255,
    Float = 1,
    Flag = "FOV THICKNESS",
    Callback = function(value)
        FOV_Circle.Thickness = value
    end
}



local section = tab:Section{
    Name = "Knife",
    Side = "Right"
}


getgenv().StabAuraToggle = false
local toggle = section:Toggle{
    Name = "Stab Aura",
    Flag = "Filled FOV",
    --Default = true,
    Callback  = function(bool)
        getgenv().StabAuraToggle = bool
        print("Stab Aura is now " .. (bool and "enabled" or "disabled"))
    end
}

do
    local function characterAdded(Character)
        if typeof(Character) ~= "Instance" then return;end;
        LocalCharacter = Character;
        LocalRootPart = Character:WaitForChild("HumanoidRootPart");
        LocalHumanoid = Character:WaitForChild("Humanoid");
    end;
    characterAdded(LocalCharacter);
    LocalPlayer.CharacterAdded:Connect(characterAdded);
end

local Player = game.Players.LocalPlayer
local wS = game.Workspace
local ClosestPlayer = function()
    local Closest = nil
    local Distance = 9e9
    for i, v in next, game:GetService("Players"):GetPlayers() do
        if v.Name ~= Player.Name then
            if wS[v.Name] and wS[v.Name]:FindFirstChild("Humanoid") and wS[v.Name]:FindFirstChild("Humanoid").Health ~= 0 then
                local Magnitude = (Player.Character.Head.Position - wS[v.Name].Head.Position).Magnitude
                if Magnitude < Distance then
                    Closest = wS[v.Name]
                    Distance = Magnitude
                    end
                end
            end
        end
    return Closest
end
local cooldown = false

task.spawn(function()
    game:GetService("RunService").Stepped:connect(function()
        if getgenv().StabAuraToggle == true and Player.Character and not cooldown then
            if Player:DistanceFromCharacter(ClosestPlayer().Torso.Position) <= 6.5 then
                Player.PlayerScripts.localknifehandler.HitCheck:Fire(ClosestPlayer())
                coroutine.wrap(function()
                    cooldown = true
                    task.wait(0.8)
                    cooldown = false
                end)()
            else
                task.wait()
            end
        end
    end)
end)
































































































local tab = main:Tab("Farming")



local section = tab:Section{
    Name = "AutoFarm",
    Side = "Left"
}


getgenv().AutoFarmToggle = false
local toggle = section:Toggle{
    Name = "Autofarm (use stab aura)",
    Flag = "TP Autofarm",
    --Default = true,
    Callback  = function(bool)
        getgenv().AutoFarmToggle = bool
    end
}

task.spawn(function()
    game.RunService.Stepped:connect(function()
        if getgenv().AutoFarmToggle == true then
            workspace.Gravity = 300000;
        end
        
        if getgenv().AutoFarmToggle == false then
            workspace.Gravity = 196.2;
        end
    end)
end)


do
    local function characterAdded(Character)
        if typeof(Character) ~= "Instance" then return;end;
        LocalCharacter = Character;
        LocalRootPart = Character:WaitForChild("HumanoidRootPart");
        LocalHumanoid = Character:WaitForChild("Humanoid");
    end;
    characterAdded(LocalCharacter);
    LocalPlayer.CharacterAdded:Connect(characterAdded);
end;

TargetFrame.Changed:Connect(function()
    TargetVisible = TargetFrame.Visible;
end);
TargetText.Changed:Connect(function()
    Target = Players:FindFirstChild(TargetText.Text);
end);

local VotePad = workspace.Lobby.VoteStation.pad3.Position;
local function getClosestPlayer()
    local Closest : Instance;
    local MaxDistance : number;

    for I, Player in next, Players:GetPlayers() do
        if Player ~= LocalPlayer and LocalRootPart then
            local Character = workspace:FindFirstChild(Player.Name);
            local RootPart = Character and Character:FindFirstChild("HumanoidRootPart");
            local Humanoid = RootPart and Character:FindFirstChild("Humanoid");

            if Humanoid and Humanoid.Health > 0 then
                local Distance = (VotePad - RootPart.Position).Magnitude;
                if Distance > 300 then
                    Distance = (LocalRootPart.Position - RootPart.Position).Magnitude;
                    if Closest then
                        if Distance < MaxDistance then
                            Closest = Player;
                            MaxDistance = Distance;
                        end;
                    else
                        Closest = Player;
                        MaxDistance = Distance;
                    end;
                end;
            end;
        end;
    end;

    return Closest, MaxDistance;
end;
local ClosestPlayer : Instance;
local ClosestPlayerCharacter : Instance;
local ClosestPlayerRootPart : Instance;

local HitCheckCooldown = false;
local HitCheck = LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("localknifehandler"):WaitForChild("HitCheck");


local ThrowCooldown = false;
local ThrowCFrame = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1);

local TPTweenInfo = TweenInfo.new(0, Enum.EasingStyle.Linear, Enum.EasingDirection.Out);
local TPOffset = CFrame.new(0, -3, 1.6);

local TweenService = game:GetService("TweenService");
shared.n2autofarm = game:GetService("RunService").Heartbeat:Connect(function()
    ClosestPlayer = getClosestPlayer();
    ClosestPlayerCharacter = ClosestPlayer and workspace:FindFirstChild(ClosestPlayer.Name);
    ClosestPlayerRootPart = ClosestPlayerCharacter and ClosestPlayerCharacter:FindFirstChild("HumanoidRootPart");
    
    -- print(TargetVisible, Target, LocalCharacter, LocalRootPart, LocalHumanoid);
    if getgenv().AutoFarmToggle == true and TargetVisible and Target and LocalCharacter and LocalRootPart and LocalHumanoid then
        TargetCharacter = workspace:FindFirstChild(Target.Name);
        TargetRootPart = TargetCharacter and TargetCharacter:FindFirstChild("HumanoidRootPart");

        if TargetRootPart then            
            if not LocalCharacter:FindFirstChild("Knife") then
                --Auto Equip
                local Knife = LocalPlayer.Backpack:FindFirstChild"Knife";
                if Knife then
                    print"equipping";
                    LocalHumanoid:EquipTool(Knife);
                end;
            end;
            if LocalCharacter:FindFirstChild("Knife") then
                if not HitCheckCooldown and (LocalRootPart.Position - TargetRootPart.Position).Magnitude <= 6.5 then
                    --Stab Aura
                    print"stabbing";
                    HitCheck:Fire(Target);
                    HitCheckCooldown = true;
                    task.spawn(function()
                        task.wait(0.4);
                        HitCheckCooldown = false;
                    end);
                end;
                --Throw Aura
                if not ThrowCooldown then
                    ThrowCooldown = true;
                    task.spawn(function()
                        task.wait(0.3);
                        if TargetRootPart then
                            ThrowKnife:FireServer(TargetRootPart.Position, 0, ThrowCFrame);
                            task.wait(0.1);
                            print"unequipping";
                            LocalHumanoid:UnequipTools();
                        end;

                        task.wait(1);
                        ThrowCooldown = false;
                    end);
                end;
            end;
            
            LocalHumanoid:ChangeState(11);
            TweenService:Create(
                LocalRootPart,
                TPTweenInfo,
                {CFrame = TargetRootPart.CFrame * TPOffset}
            ):Play();
        end;
    end;
end);

getgenv().GhostFarmToggle = false
local toggle = section:Toggle{
    Name = "GhostCoin Farm",
    Flag = "Toggle 1",
    --Default = true,
    Callback  = function(bool)
        getgenv().GhostFarmToggle = bool
        print("Toggle 1 is now " .. (bool and "enabled" or "disabled"))
    end
}
game.Players.LocalPlayer.CharacterAdded:connect(function()
    if getgenv().GhostFarmToggle == true then
        game.ReplicatedStorage.Remotes.RequestGhostSpawn:InvokeServer()
    
        task.spawn(function()
            game.RunService.Stepped:connect(function()
                for i,v in pairs(game.Workspace.GhostCoins:GetDescendants()) do
                    if v:IsA"TouchTransmitter" then
                        firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0) 
                        task.wait()
                        firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 1)
                    end
                end
            end)
        end)
    end
end)


getgenv().AutoCandyToggle = false
local toggle = section:Toggle{
    Name = "Autocollect Candy (not out)",
    Flag = "Toggle 1",
    --Default = true,
    Callback  = function(bool)
        getgenv().AutoCandyToggle = bool
    end
}
task.spawn(function()
    game.RunService.Stepped:connect(function()
        if getgenv().AutoCandyToggle == true then
            for i,v in pairs(game.Workspace.EventCurrency:GetDescendants()) do
                if v:IsA"TouchTransmitter" then
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0) 
                    task.wait()
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 1)
                end
            end
        end
    end)
end)








local section = tab:Section{
    Name = "Season",
    Side = "Left"
}



section:Button{
    Name = "collect season pass",
    Callback  = function()
        local Claim_Pass = function(Claim)
    game:GetService("ReplicatedStorage").Remotes.CompRemotes.RequestTier:FireServer(Claim);
end

task.spawn(function()
    for i = 1, 10 do
        Claim_Pass(i);
    end
end)
    end
}



local section = tab:Section{
    Name = "Autofarm Settings",
    Side = "Left"
}

local on = false
local toggle = section:Toggle{
    Name = "Remove Limbs",
    Flag = "Toggle 1",
    Default = on,
    Callback  = function(bool)
        on = bool
        while on and task.wait() do
game.Players.LocalPlayer.Character['Right Leg']:remove()
game.Players.LocalPlayer.Character['Left Leg']:remove()
        end
    end
}



local on = false
local toggle = section:Toggle{
    Name = "Remove Arms",
    Flag = "Toggle 1",
    Default = on,
    Callback  = function(bool)
        on = bool
        while on and task.wait() do
game.Players.LocalPlayer.Character['Right Arm']:remove()
game.Players.LocalPlayer.Character['Left Arm']:remove()
        end
    end
}





local seperator = section:Separator("Animations")

local toggle = section:Toggle{
    Name = "FloorCrawl (not out)",
    Flag = "Toggle 1",
    --Default = true,
    Callback  = function(bool)
        print("Toggle 1 is now " .. (bool and "enabled" or "disabled"))
    end
}

local toggle = section:Toggle{
    Name = "Moving Dance(not out)",
    Flag = "Toggle 1",
    --Default = true,
    Callback  = function(bool)
        print("Toggle 1 is now " .. (bool and "enabled" or "disabled"))
    end
}






local seperator = section:Separator("Spinning")







    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
local tab = main:Tab("Hiboxes")

local section = tab:Section{
    Name = "Hitbox Expander",
    Side = "Left"
}


local toggle = section:Toggle{
    Name = "Epic HBE",
    Flag = "Toggle 1",
    --Default = true,
    Callback  = function(bool)
if bool == true then

	    getgenv().OFFON = true

	    getgenv().ReSizeXCV = getgenv().SizeXCV

	    getgenv().TransparencyXCV = 0

	    getgenv().ColourXCV = Color3.fromRGB(255, 0, 255)

	    else

	        if bool == false then

	            getgenv().OFFON = false

	            getgenv().SizeXCVs = Vector3.new(10,10,10)

	            getgenv().TransparencyXCV = 1

	            getgenv().ColourXCV = Color3.fromRGB(255, 0, 255)

	end

        end
    end
}

local section = tab:Section{
    Name = "Hitbox Expander Settings",
    Side = "Left"
}


local slider = section:Slider{
    Name = "Slider",
    Text = " HBE Size [value]/70",
    --Default = 0.1,
    Min = 0,
    Max = 70,
    Float = 1,
    Flag = "Slider 1",
    Callback = function(Value)
        if getgenv().OFFON == true then do

		getgenv().SizeXCV = Vector3.new(Value,Value,Value)

		getgenv().ReSizeXCV = SizeXCV

		end

	    end
    end
}


local slider = section:Slider{
    Name = "Slider",
    Text = " HBE Clarity [value]/1",
    --Default = 0.1,
    Min = 0,
    Max = 1,
    Float = 0.1,
    Flag = "Slider 1",
    Callback = function(Value)
TransparencyXCV = Value
    end
}


local colorpicker = section:ColorPicker{
    Name = "HBE Color",
    Default = Color3.fromRGB(100, 0, 255),
    Flag = "Color picker 1",
    Callback = function(color)
    ColourXCV = color
    end
}


































































local tab = main:Tab("Player")

local section = tab:Section{
    Name = "Movement",
    Side = "Left"
}

_G.WalkSpeed = false
local toggle = section:Toggle{
    Name = "Custom Walkspeed",
    Flag = "Toggle 1",
    --Default = true,
    Callback  = function(bool)
        _G.WalkSpeed = bool
    end
}
local WalkSpeedValue = 16

local slider = section:Slider{
    Name = "Speed",
    Text = "[value]/35",
    --Default = 0.1,
    Min = 16,
    Max = 35,
    Float = 1,
    Flag = "Slider 1",
    Callback = function(value)
        WalkSpeedValue = value
    end
}
task.spawn(function()
    game.RunService.Stepped:connect(function()
        if _G.WalkSpeed == true then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = WalkSpeedValue
        else
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
    end)
end)







_G.JumpPower = false
local toggle = section:Toggle{
    Name = "Custom JumpPower",
    Flag = "Toggle 1",
    --Default = true,
    Callback  = function(bool)
        _G.JumpPower = bool
    end
}
local JumpPowerValue = 16

local slider = section:Slider{
    Name = "JumpPower Height",
    Text = "[value]/200",
    --Default = 0.1,
    Min = 50,
    Max = 200,
    Float = 1,
    Flag = "Slider 1",
    Callback = function(value)
        JumpPowerValue = value
    end
}
task.spawn(function()
    game.RunService.Stepped:connect(function()
        if _G.JumpPower == true then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = JumpPowerValue
        else
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
        end
    end)
end)


_G.HipHeight = false
local toggle = section:Toggle{
    Name = "Custom HipHeight",
    Flag = "Toggle 1",
    --Default = true,
    Callback  = function(bool)
        _G.HipHeight = bool
    end
}
local HipHeightValue = 0
local slider = section:Slider{
    Name = "HipHeight",
    Text = "[value]/20",
    --Default = 0.1,
    Min = 0,
    Max = 20,
    Float = 1,
    Flag = "Slider 1",
    Callback = function(value)
       HipHeightValue = value
    end
}
task.spawn(function()
    game.RunService.Stepped:connect(function()
        if _G.HipHeight == true then
            game.Players.LocalPlayer.Character.Humanoid.HipHeight = HipHeightValue
        else
            game.Players.LocalPlayer.Character.Humanoid.HipHeight = 0
        end
    end)
end)



local tab = main:Tab("Shop")

local section = tab:Section{
    Name = "Buy Halloween event items",
    Side = "Left"
}

section:Button{
    Name = "Buy Candy Kunai",
    Callback  = function()


local args = {
    [1] = "Candy Kunai"
}

game:GetService("ReplicatedStorage").Remotes.RequestCandyItemPurchase:InvokeServer(unpack(args))

    end
}



section:Button{
    Name = "Buy Hex Potion",
    Callback  = function()


local args = {
    [1] = "Hex Potion"
}

game:GetService("ReplicatedStorage").Remotes.RequestCandyItemPurchase:InvokeServer(unpack(args))

    end
}

section:Button{
    Name = "Buy Candy Monster",
    Callback  = function()


local args = {
    [1] = "Candy Monster"
}

game:GetService("ReplicatedStorage").Remotes.RequestCandyItemPurchase:InvokeServer(unpack(args))

    end
}

section:Button{
    Name = "Buy Gourd Guardian",
    Callback  = function()


local args = {
    [1] = "Gourd Guardian"
}

game:GetService("ReplicatedStorage").Remotes.RequestCandyItemPurchase:InvokeServer(unpack(args))

    end
}


section:Button{
    Name = "Buy Key (with candy)",
    Callback  = function()


local args = {
    [1] = "Key"
}

game:GetService("ReplicatedStorage").Remotes.RequestCandyItemPurchase:InvokeServer(unpack(args))

    end
}




section:Button{
    Name = "Buy Key 100 candy",
    Callback  = function()
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = 100
}

game:GetService("ReplicatedStorage").Remotes.RequestEggExchange:InvokeServer(unpack(args))


    end
}

section:Button{
    Name = "Buy Pumpkin Plush",
    Callback  = function()
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = "Pumpkin Plush"
}

game:GetService("ReplicatedStorage").Remotes.RequestCandyItemPurchase:InvokeServer(unpack(args))


    end
}



local section = tab:Section{
    Name = "Halloween Cases",
    Side = "Left"
}





section:Button{
    Name = "Buy Skeleton Case",
    Callback  = function()


local args = {
    [1] = "Knife",
    [2] = "Case",
    [3] = "Skeleton Case"
}

game:GetService("ReplicatedStorage").Remotes.RequestItemPurchase:InvokeServer(unpack(args))

    end
}









section:Button{
    Name = "Buy Infected Case",
    Callback  = function()


local args = {
    [1] = "Knife",
    [2] = "Case",
    [3] = "Infected Case"
}

game:GetService("ReplicatedStorage").Remotes.RequestItemPurchase:InvokeServer(unpack(args))

    end
}



local section = tab:Section{
    Name = "Normal Cases",
    Side = "Right"
}

section:Button{
    Name = "Buy Standard Case",
    Callback  = function()


local args = {
    [1] = "Knife",
    [2] = "Case",
    [3] = "Standard Case"
}

game:GetService("ReplicatedStorage").Remotes.RequestItemPurchase:InvokeServer(unpack(args))

    end
}


section:Button{
    Name = "Buy Polished Case",
    Callback  = function()


local args = {
    [1] = "Knife",
    [2] = "Case",
    [3] = "Polished Case"
}

game:GetService("ReplicatedStorage").Remotes.RequestItemPurchase:InvokeServer(unpack(args))

    end
}

section:Button{
    Name = "Buy Sturdy Case",
    Callback  = function()


local args = {
    [1] = "Knife",
    [2] = "Case",
    [3] = "Sturdy Case"
}

game:GetService("ReplicatedStorage").Remotes.RequestItemPurchase:InvokeServer(unpack(args))

    end
}


section:Button{
    Name = "Buy Elite Case",
    Callback  = function()


local args = {
    [1] = "Knife",
    [2] = "Case",
    [3] = "Elite Case"
}

game:GetService("ReplicatedStorage").Remotes.RequestItemPurchase:InvokeServer(unpack(args))

    end
}

section:Button{
    Name = "Buy Heroic Case",
    Callback  = function()


local args = {
    [1] = "Knife",
    [2] = "Case",
    [3] = "Heroic Case"
}

game:GetService("ReplicatedStorage").Remotes.RequestItemPurchase:InvokeServer(unpack(args))

    end
}

section:Button{
    Name = "Buy Key",
    Callback  = function()


local args = {
    [1] = "Knife",
    [2] = "Case",
    [3] = "Key"
}

game:GetService("ReplicatedStorage").Remotes.RequestItemPurchase:InvokeServer(unpack(args))

    end
}






--library:SaveConfig("config", true) -- universal config
--library:SaveConfig("config") -- game specific config
--library:DeleteConfig("config", true) -- universal config
--library:DeleteConfig("config") -- game specific config
--library:GetConfigs(true) -- return universal and game specific configs (table)
--library:GetConfigs() -- return game specific configs (table)
--library:LoadConfig("config", true) -- load universal config
--library:LoadConfig("config") -- load game specific config

local configs = main:Tab("Configs")

local themes = configs:Section{Name = "Theme", Side = "Left"}

local themepickers = {}

local themelist = themes:Dropdown{
    Name = "Theme",
    Default = library.currenttheme,
    Content = library:GetThemes(),
    Flag = "Theme Dropdown",
    Callback = function(option)
        if option then
            library:SetTheme(option)

            for option, picker in next, themepickers do
                picker:Set(library.theme[option])
            end
        end
    end
}

library:ConfigIgnore("Theme Dropdown")

local namebox = themes:Box{
    Name = "Custom Theme Name",
    Placeholder = "Custom Theme",
    Flag = "Custom Theme"
}

library:ConfigIgnore("Custom Theme")

themes:Button{
    Name = "Save Custom Theme",
    Callback = function()
        if library:SaveCustomTheme(library.flags["Custom Theme"]) then
            themelist:Refresh(library:GetThemes())
            themelist:Set(library.flags["Custom Theme"])
            namebox:Set("")
        end
    end
}

local customtheme = configs:Section{Name = "Custom Theme", Side = "Right"}

themepickers["Accent"] = customtheme:ColorPicker{
    Name = "Accent",
    Default = library.theme["Accent"],
    Flag = "Accent",
    Callback = function(color)
        library:ChangeThemeOption("Accent", color)
    end
}

library:ConfigIgnore("Accent")

themepickers["Window Background"] = customtheme:ColorPicker{
    Name = "Window Background",
    Default = library.theme["Window Background"],
    Flag = "Window Background",
    Callback = function(color)
        library:ChangeThemeOption("Window Background", color)
    end
}

library:ConfigIgnore("Window Background")

themepickers["Window Border"] = customtheme:ColorPicker{
    Name = "Window Border",
    Default = library.theme["Window Border"],
    Flag = "Window Border",
    Callback = function(color)
        library:ChangeThemeOption("Window Border", color)
    end
}

library:ConfigIgnore("Window Border")

themepickers["Tab Background"] = customtheme:ColorPicker{
    Name = "Tab Background",
    Default = library.theme["Tab Background"],
    Flag = "Tab Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Background", color)
    end
}

library:ConfigIgnore("Tab Background")

themepickers["Tab Border"] = customtheme:ColorPicker{
    Name = "Tab Border",
    Default = library.theme["Tab Border"],
    Flag = "Tab Border",
    Callback = function(color)
        library:ChangeThemeOption("Tab Border", color)
    end
}

library:ConfigIgnore("Tab Border")

themepickers["Tab Toggle Background"] = customtheme:ColorPicker{
    Name = "Tab Toggle Background",
    Default = library.theme["Tab Toggle Background"],
    Flag = "Tab Toggle Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Toggle Background", color)
    end
}

library:ConfigIgnore("Tab Toggle Background")

themepickers["Section Background"] = customtheme:ColorPicker{
    Name = "Section Background",
    Default = library.theme["Section Background"],
    Flag = "Section Background",
    Callback = function(color)
        library:ChangeThemeOption("Section Background", color)
    end
}

library:ConfigIgnore("Section Background")

themepickers["Section Border"] = customtheme:ColorPicker{
    Name = "Section Border",
    Default = library.theme["Section Border"],
    Flag = "Section Border",
    Callback = function(color)
        library:ChangeThemeOption("Section Border", color)
    end
}

library:ConfigIgnore("Section Border")

themepickers["Text"] = customtheme:ColorPicker{
    Name = "Text",
    Default = library.theme["Text"],
    Flag = "Text",
    Callback = function(color)
        library:ChangeThemeOption("Text", color)
    end
}

library:ConfigIgnore("Text")

themepickers["Disabled Text"] = customtheme:ColorPicker{
    Name = "Disabled Text",
    Default = library.theme["Disabled Text"],
    Flag = "Disabled Text",
    Callback = function(color)
        library:ChangeThemeOption("Disabled Text", color)
    end
}

library:ConfigIgnore("Disabled Text")

themepickers["Object Background"] = customtheme:ColorPicker{
    Name = "Object Background",
    Default = library.theme["Object Background"],
    Flag = "Object Background",
    Callback = function(color)
        library:ChangeThemeOption("Object Background", color)
    end
}

library:ConfigIgnore("Object Background")

themepickers["Object Border"] = customtheme:ColorPicker{
    Name = "Object Border",
    Default = library.theme["Object Border"],
    Flag = "Object Border",
    Callback = function(color)
        library:ChangeThemeOption("Object Border", color)
    end
}

library:ConfigIgnore("Object Border")

themepickers["Dropdown Option Background"] = customtheme:ColorPicker{
    Name = "Dropdown Option Background",
    Default = library.theme["Dropdown Option Background"],
    Flag = "Dropdown Option Background",
    Callback = function(color)
        library:ChangeThemeOption("Dropdown Option Background", color)
    end
}

library:ConfigIgnore("Dropdown Option Background")

local configsection = configs:Section{Name = "Configs", Side = "Left"}

local configlist = configsection:Dropdown{
    Name = "Configs",
    Content = library:GetConfigs(), -- GetConfigs(true) if you want universal configs
    Flag = "Config Dropdown"
}

library:ConfigIgnore("Config Dropdown")

local loadconfig = configsection:Button{
    Name = "Load Config",
    Callback = function()
        library:LoadConfig(library.flags["Config Dropdown"]) -- LoadConfig(library.flags["Config Dropdown"], true)  if you want universal configs
    end
}

local delconfig = configsection:Button{
    Name = "Delete Config",
    Callback = function()
        library:DeleteConfig(library.flags["Config Dropdown"]) -- DeleteConfig(library.flags["Config Dropdown"], true)  if you want universal configs
        configlist:Refresh(library:GetConfigs())
    end
}


local configbox = configsection:Box{
    Name = "Config Name",
    Placeholder = "Config Name",
    Flag = "Config Name"
}

library:ConfigIgnore("Config Name")

local save = configsection:Button{
    Name = "Save Config",
    Callback = function()
        library:SaveConfig(library.flags["Config Dropdown"] or library.flags["Config Name"]) -- SaveConfig(library.flags["Config Name"], true) if you want universal configs
        configlist:Refresh(library:GetConfigs())
    end
}

local keybindsection = configs:Section{Name = "UI Toggle Keybind", Side = "Left"}

keybindsection:Keybind{
    Name = "UI Toggle",
    Flag = "UI Toggle",
    Default = Enum.KeyCode.Insert,
    Blacklist = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3},
    Callback = function(_, fromsetting)
        if not fromsetting then
            library:Close()
        end
    end
}

keybindsection:Keybind{
    Name = "Destroy UI",
    Flag = "Unload UI",
    Default = Enum.KeyCode.Delete,
    Blacklist = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3},
    Callback = function(_, fromsetting)
        if not fromsetting then
            library:Unload()
        end
    end
}
